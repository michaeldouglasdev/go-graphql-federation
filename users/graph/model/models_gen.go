// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type LoginUserResponse interface {
	IsLoginUserResponse()
}

type MeUserResponse interface {
	IsMeUserResponse()
}

type UsersAllResponse interface {
	IsUsersAllResponse()
}

type UsersCreateResponse interface {
	IsUsersCreateResponse()
}

type CreateUserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Name     string `json:"name"`
}

type Error struct {
	Message string `json:"message"`
}

func (Error) IsUsersCreateResponse() {}

type GetUserInput struct {
	Type  GetUserInputType `json:"type"`
	Value string           `json:"value"`
}

type Login struct {
	AccessToken string `json:"accessToken"`
	ExpiresIn   int    `json:"expiresIn"`
	User        *User  `json:"user"`
}

func (Login) IsLoginUserResponse() {}

type LoginRequiredError struct {
	Message string `json:"message"`
}

func (LoginRequiredError) IsUsersAllResponse() {}

type LoginUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Name     string `json:"name"`
}

type LoginUserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginUserInvalidUsernameOrPasswordError struct {
	Message string `json:"message"`
}

func (LoginUserInvalidUsernameOrPasswordError) IsLoginUserResponse() {}

type LoginUserNotFoundError struct {
	Message string `json:"message"`
}

func (LoginUserNotFoundError) IsLoginUserResponse() {}

type Mutation struct {
}

type Query struct {
}

type UnauthorizedError struct {
	Message string `json:"message"`
}

func (UnauthorizedError) IsUsersAllResponse() {}

type UsersAllResults struct {
	Results []*User `json:"results"`
}

func (UsersAllResults) IsUsersAllResponse() {}

type UsersMutations struct {
	Create UsersCreateResponse `json:"create"`
	Login  LoginUserResponse   `json:"login"`
}

type UsersQueries struct {
	All UsersAllResponse `json:"all"`
	Get GetUserResponse  `json:"get"`
	Me  MeUserResponse   `json:"me"`
}

type GetUserInputType string

const (
	GetUserInputTypeID GetUserInputType = "ID"
)

var AllGetUserInputType = []GetUserInputType{
	GetUserInputTypeID,
}

func (e GetUserInputType) IsValid() bool {
	switch e {
	case GetUserInputTypeID:
		return true
	}
	return false
}

func (e GetUserInputType) String() string {
	return string(e)
}

func (e *GetUserInputType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GetUserInputType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GetUserInputType", str)
	}
	return nil
}

func (e GetUserInputType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	UserTypeBasic UserType = "BASIC"
	UserTypeAdmin UserType = "ADMIN"
)

var AllUserType = []UserType{
	UserTypeBasic,
	UserTypeAdmin,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeBasic, UserTypeAdmin:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
