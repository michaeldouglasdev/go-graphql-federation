package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"go-graphql-apollo-federation/pets/graph/model"
	"go-graphql-apollo-federation/pets/internal/db"

	"github.com/google/uuid"
)

// Pets is the resolver for the pets field.
func (r *mutationResolver) Pets(ctx context.Context) (*model.PetsMutations, error) {
	return &model.PetsMutations{}, nil
}

// Create is the resolver for the create field.
func (r *petsMutationsResolver) Create(ctx context.Context, obj *model.PetsMutations, data model.PetsCreateInput) (model.PetsCreateResponse, error) {
	user := ctx.Value("user").(*model.User)
	id := uuid.NewString()

	err := r.PetsDB.CreatePet(ctx, db.CreatePetParams{
		ID:       id,
		Name:     data.Name,
		Breed:    db.PetsBreed(data.Breed),
		Birthday: data.Birthday,
		UserID:   user.ID,
	})

	if err != nil {
		return model.Error{
			Message: "An error occurred while registring your pet",
		}, nil
	}

	pet, err := r.PetsDB.GetPet(ctx, id)
	return model.Pet{
		ID:   pet.ID,
		Name: pet.Name,

		User: &model.User{
			ID: pet.UserID,
		},
	}, nil
}

// Delete is the resolver for the delete field.
func (r *petsMutationsResolver) Delete(ctx context.Context, obj *model.PetsMutations, id string) (model.PetsDeleteResponse, error) {
	panic(fmt.Errorf("not implemented: Delete - delete"))
}

// All is the resolver for the all field.
func (r *petsQueriesResolver) All(ctx context.Context, obj *model.PetsQueries) ([]*model.Pet, error) {
	panic(fmt.Errorf("not implemented: All - get"))
}

// Get is the resolver for the get field.
func (r *petsQueriesResolver) Get(ctx context.Context, obj *model.PetsQueries, id string) (model.PetsGetResponse, error) {
	panic(fmt.Errorf("not implemented: Get - get"))
}

// Pets is the resolver for the pets field.
func (r *queryResolver) Pets(ctx context.Context) (*model.PetsQueries, error) {
	return &model.PetsQueries{}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// PetsMutations returns PetsMutationsResolver implementation.
func (r *Resolver) PetsMutations() PetsMutationsResolver { return &petsMutationsResolver{r} }

// PetsQueries returns PetsQueriesResolver implementation.
func (r *Resolver) PetsQueries() PetsQueriesResolver { return &petsQueriesResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type petsMutationsResolver struct{ *Resolver }
type petsQueriesResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
