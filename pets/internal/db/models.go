// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
)

type PetsBreed string

const (
	PetsBreedDOG PetsBreed = "DOG"
	PetsBreedCAT PetsBreed = "CAT"
)

func (e *PetsBreed) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PetsBreed(s)
	case string:
		*e = PetsBreed(s)
	default:
		return fmt.Errorf("unsupported scan type for PetsBreed: %T", src)
	}
	return nil
}

type NullPetsBreed struct {
	PetsBreed PetsBreed
	Valid     bool // Valid is true if PetsBreed is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPetsBreed) Scan(value interface{}) error {
	if value == nil {
		ns.PetsBreed, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PetsBreed.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPetsBreed) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PetsBreed), nil
}

type Pet struct {
	ID       string
	Name     string
	Birthday string
	Breed    PetsBreed
	UserID   string
}
