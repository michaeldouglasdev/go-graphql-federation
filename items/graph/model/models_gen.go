// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Item interface {
	IsEntity()
	IsItem()
	GetID() string
	GetName() string
	GetPrice() *ItemPrice
	GetImage() string
}

type ItemsCreateResponse interface {
	IsItemsCreateResponse()
}

type ItemsFoodsCreateResponse interface {
	IsItemsFoodsCreateResponse()
}

type ItemsFoodsListResponse interface {
	IsItemsFoodsListResponse()
}

type ItemsFoodsResponse interface {
	IsItemsFoodsResponse()
}

type ItemsGetResponse interface {
	IsItemsGetResponse()
}

type ItemsListResponse interface {
	IsItemsListResponse()
}

type ItemsToysCreateResponse interface {
	IsItemsToysCreateResponse()
}

type ItemsToysListResponse interface {
	IsItemsToysListResponse()
}

type ItemsToysResponse interface {
	IsItemsToysResponse()
}

type Error struct {
	Message string `json:"message"`
}

func (Error) IsItemsGetResponse() {}

func (Error) IsItemsListResponse() {}

func (Error) IsItemsFoodsListResponse() {}

func (Error) IsItemsFoodsResponse() {}

func (Error) IsItemsToysListResponse() {}

func (Error) IsItemsToysResponse() {}

func (Error) IsItemsCreateResponse() {}

func (Error) IsItemsFoodsCreateResponse() {}

func (Error) IsItemsToysCreateResponse() {}

type ItemFood struct {
	ID             string     `json:"id"`
	Name           string     `json:"name"`
	Price          *ItemPrice `json:"price"`
	ExpirationTime *string    `json:"expirationTime,omitempty"`
	Weight         string     `json:"weight"`
	Image          string     `json:"image"`
}

func (ItemFood) IsItemsGetResponse() {}

func (ItemFood) IsItemsFoodsResponse() {}

func (ItemFood) IsItemsToysResponse() {}

func (ItemFood) IsItem()                   {}
func (this ItemFood) GetID() string        { return this.ID }
func (this ItemFood) GetName() string      { return this.Name }
func (this ItemFood) GetPrice() *ItemPrice { return this.Price }
func (this ItemFood) GetImage() string     { return this.Image }

func (ItemFood) IsItemsCreateResponse() {}

func (ItemFood) IsItemsFoodsCreateResponse() {}

func (ItemFood) IsEntity() {}

type ItemPrice struct {
	Value float64 `json:"value"`
}

type ItemToy struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Price       *ItemPrice     `json:"price"`
	Category    ToyCategory    `json:"category"`
	Material    ToyMaterial    `json:"material"`
	SuitableFor ToySuitableFor `json:"suitableFor"`
	Image       string         `json:"image"`
}

func (ItemToy) IsItemsGetResponse() {}

func (ItemToy) IsItem()                   {}
func (this ItemToy) GetID() string        { return this.ID }
func (this ItemToy) GetName() string      { return this.Name }
func (this ItemToy) GetPrice() *ItemPrice { return this.Price }
func (this ItemToy) GetImage() string     { return this.Image }

func (ItemToy) IsItemsCreateResponse() {}

func (ItemToy) IsItemsToysCreateResponse() {}

func (ItemToy) IsEntity() {}

type ItemsCreateFoodInput struct {
	Name           string  `json:"name"`
	Price          float64 `json:"price"`
	ExpirationTime string  `json:"expirationTime"`
	Image          string  `json:"image"`
	Weight         string  `json:"weight"`
}

type ItemsCreateInput struct {
	Food *ItemsCreateFoodInput `json:"food,omitempty"`
	Toy  *ItemsCreateToyInput  `json:"toy,omitempty"`
}

type ItemsCreateToyInput struct {
	Name        string         `json:"name"`
	Price       float64        `json:"price"`
	Image       string         `json:"image"`
	SuitableFor ToySuitableFor `json:"suitableFor"`
	Material    ToyMaterial    `json:"material"`
	Category    ToyCategory    `json:"category"`
}

type ItemsFoodsCreateInput struct {
	Name           string  `json:"name"`
	Price          float64 `json:"price"`
	ExpirationTime string  `json:"expirationTime"`
	Image          string  `json:"image"`
	Weight         string  `json:"weight"`
}

type ItemsFoodsListResults struct {
	Results []*ItemFood `json:"results"`
}

func (ItemsFoodsListResults) IsItemsFoodsListResponse() {}

func (ItemsFoodsListResults) IsItemsToysListResponse() {}

type ItemsFoodsMutationsResponse struct {
	Create ItemsFoodsCreateResponse `json:"create"`
}

type ItemsFoodsQueries struct {
	List ItemsFoodsListResponse `json:"list"`
	Get  ItemsFoodsResponse     `json:"get"`
}

type ItemsGetInput struct {
	ID string `json:"id"`
}

type ItemsListInput struct {
	Type ItemType `json:"type"`
}

type ItemsListResults struct {
	Results []Item `json:"results"`
}

func (ItemsListResults) IsItemsListResponse() {}

type ItemsMutations struct {
	Create ItemsCreateResponse          `json:"create"`
	Foods  *ItemsFoodsMutationsResponse `json:"foods"`
	Toys   *ItemsFoodsMutationsResponse `json:"toys"`
}

type ItemsQueries struct {
	List  ItemsListResponse  `json:"list"`
	Get   ItemsGetResponse   `json:"get"`
	Foods *ItemsFoodsQueries `json:"foods"`
	Toys  *ItemsToysQueries  `json:"toys"`
}

type ItemsToysCreateInput struct {
	Name        string         `json:"name"`
	Price       float64        `json:"price"`
	Image       string         `json:"image"`
	SuitableFor ToySuitableFor `json:"suitableFor"`
	Material    ToyMaterial    `json:"material"`
	Category    ToyCategory    `json:"category"`
}

type ItemsToysListResults struct {
	Results []*ItemToy `json:"results"`
}

type ItemsToysMutationsResponse struct {
	Create ItemsToysCreateResponse `json:"create"`
}

type ItemsToysQueries struct {
	List ItemsToysListResponse `json:"list"`
	Get  ItemsToysResponse     `json:"get"`
}

type Mutation struct {
}

type Query struct {
}

type ItemType string

const (
	ItemTypeFood ItemType = "FOOD"
	ItemTypeToy  ItemType = "TOY"
)

var AllItemType = []ItemType{
	ItemTypeFood,
	ItemTypeToy,
}

func (e ItemType) IsValid() bool {
	switch e {
	case ItemTypeFood, ItemTypeToy:
		return true
	}
	return false
}

func (e ItemType) String() string {
	return string(e)
}

func (e *ItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemType", str)
	}
	return nil
}

func (e ItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ToyCategory string

const (
	ToyCategoryInteractive ToyCategory = "INTERACTIVE"
)

var AllToyCategory = []ToyCategory{
	ToyCategoryInteractive,
}

func (e ToyCategory) IsValid() bool {
	switch e {
	case ToyCategoryInteractive:
		return true
	}
	return false
}

func (e ToyCategory) String() string {
	return string(e)
}

func (e *ToyCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ToyCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ToyCategory", str)
	}
	return nil
}

func (e ToyCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ToyMaterial string

const (
	ToyMaterialPlastic ToyMaterial = "PLASTIC"
)

var AllToyMaterial = []ToyMaterial{
	ToyMaterialPlastic,
}

func (e ToyMaterial) IsValid() bool {
	switch e {
	case ToyMaterialPlastic:
		return true
	}
	return false
}

func (e ToyMaterial) String() string {
	return string(e)
}

func (e *ToyMaterial) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ToyMaterial(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ToyMaterial", str)
	}
	return nil
}

func (e ToyMaterial) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ToySuitableFor string

const (
	ToySuitableForCats ToySuitableFor = "CATS"
	ToySuitableForDogs ToySuitableFor = "DOGS"
)

var AllToySuitableFor = []ToySuitableFor{
	ToySuitableForCats,
	ToySuitableForDogs,
}

func (e ToySuitableFor) IsValid() bool {
	switch e {
	case ToySuitableForCats, ToySuitableForDogs:
		return true
	}
	return false
}

func (e ToySuitableFor) String() string {
	return string(e)
}

func (e *ToySuitableFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ToySuitableFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ToySuitableFor", str)
	}
	return nil
}

func (e ToySuitableFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
