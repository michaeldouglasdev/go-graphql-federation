package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"go-graphql-apollo-federation/items/graph/model"
	"go-graphql-apollo-federation/items/internal/db"
)

// FindItemByID is the resolver for the findItemByID field.
func (r *entityResolver) FindItemByID(ctx context.Context, id string) (model.Item, error) {
	item, err := r.ItemDB.GetItem(ctx, id)
	if err != nil {
		panic("An error occurred while finding item")
	}

	if item.Type == db.ItemsTypeFOOD {
		return &model.ItemFood{
			ID:   item.ID,
			Name: item.Name,
			Price: &model.ItemPrice{
				Value: item.Price,
			},
			Weight:         item.Weight.String,
			ExpirationTime: &item.ExpirationTime.String,
			Image:          item.Image,
		}, nil
	}
	if item.Type == db.ItemsTypeTOY {
		return &model.ItemToy{
			ID:   item.ID,
			Name: item.Name,
			Price: &model.ItemPrice{
				Value: item.Price,
			},
			Image:       item.Image,
			Material:    model.ToyMaterial(item.Material.String),
			SuitableFor: model.ToySuitableFor(item.SuitableFor.ItemsSuitableFor),
		}, nil
	}

	panic("Type not mapped")
}

// FindItemFoodByID is the resolver for the findItemFoodByID field.
func (r *entityResolver) FindItemFoodByID(ctx context.Context, id string) (*model.ItemFood, error) {
	panic(fmt.Errorf("not implemented: FindItemFoodByID - findItemFoodByID"))
}

// FindItemToyByID is the resolver for the findItemToyByID field.
func (r *entityResolver) FindItemToyByID(ctx context.Context, id string) (*model.ItemToy, error) {
	panic(fmt.Errorf("not implemented: FindItemToyByID - findItemToyByID"))
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
