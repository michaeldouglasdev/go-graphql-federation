package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"go-graphql-apollo-federation/carts/graph/model"
)

// FindCartByID is the resolver for the findCartByID field.
func (r *entityResolver) FindCartByID(ctx context.Context, id string) (*model.Cart, error) {
	cart, err := r.CartDB.GetCart(ctx, id)
	if err != nil {
		println("deu ruim")
		fmt.Println(fmt.Errorf("error: %w", err)) // Envolvendo o erro e imprimindo de forma leg√≠vel
		println("errrro", id)
		panic("An error occurred while finding cart")
	}

	return &model.Cart{
		ID: cart,
	}, nil
}

// FindCartItemByID is the resolver for the findCartItemByID field.
func (r *entityResolver) FindCartItemByID(ctx context.Context, id *string) (*model.CartItem, error) {
	println("FindCartItemByID", id)
	item, err := r.CartDB.GetCartItem(ctx, *id)

	if err != nil {
		panic("An error occurred while finding cart item")
	}
	return &model.CartItem{
		ID:  &item.ID,
		Qty: int(item.Qty),
		Item: &model.Item{
			ID: item.ItemID,
		},
	}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
