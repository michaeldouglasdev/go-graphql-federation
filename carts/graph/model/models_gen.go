// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CartResponse interface {
	IsCartResponse()
}

type CartsAddItemResponse interface {
	IsCartsAddItemResponse()
}

type CartsAddResponse interface {
	IsCartsAddResponse()
}

type CartsRemoveItemResponse interface {
	IsCartsRemoveItemResponse()
}

type CartsUpdateResponse interface {
	IsCartsUpdateResponse()
}

type Cart struct {
	ID         string          `json:"id"`
	Items      []*CartItem     `json:"items"`
	TotalPrice *CartTotalPrice `json:"totalPrice"`
}

func (Cart) IsCartResponse() {}

func (Cart) IsCartsAddResponse() {}

func (Cart) IsCartsAddItemResponse() {}

func (Cart) IsCartsUpdateResponse() {}

func (Cart) IsCartsRemoveItemResponse() {}

func (Cart) IsEntity() {}

type CartItem struct {
	ID   *string `json:"id,omitempty"`
	Item *Item   `json:"item"`
	Qty  int     `json:"qty"`
}

func (CartItem) IsEntity() {}

type CartTotalPrice struct {
	Value float64 `json:"value"`
}

type CartsAddInput struct {
	Item *CartsAddItemInput `json:"item"`
}

type CartsAddItemError struct {
	Message string `json:"message"`
}

func (CartsAddItemError) IsCartsAddItemResponse() {}

type CartsAddItemInput struct {
	ID  string `json:"id"`
	Qty int    `json:"qty"`
}

type CartsQueries struct {
	// Always create a cart if dont find one
	Get CartResponse `json:"get"`
}

type CartsRemove struct {
	Item CartsRemoveItemResponse `json:"item"`
}

type CartsRemoveItemError struct {
	Message string `json:"message"`
}

func (CartsRemoveItemError) IsCartsRemoveItemResponse() {}

type CartsRemoveItemInput struct {
	ID string `json:"id"`
}

type CartsUpdateInput struct {
	Item *CartsUpdateItemInput `json:"item"`
}

type CartsUpdateItemInput struct {
	ID  string `json:"id"`
	Qty int    `json:"qty"`
}

type Error struct {
	Message string `json:"message"`
}

func (Error) IsCartResponse() {}

func (Error) IsCartsAddResponse() {}

func (Error) IsCartsUpdateResponse() {}

type GetCartInput struct {
	Type  GetCartType `json:"type"`
	Value string      `json:"value"`
}

type Item struct {
	ID    string     `json:"id"`
	Price *ItemPrice `json:"price"`
}

func (Item) IsEntity() {}

type ItemPrice struct {
	Value float64 `json:"value"`
}

type Mutation struct {
}

type Query struct {
}

type GetCartType string

const (
	GetCartTypeCartID GetCartType = "CART_ID"
	GetCartTypeUserID GetCartType = "USER_ID"
)

var AllGetCartType = []GetCartType{
	GetCartTypeCartID,
	GetCartTypeUserID,
}

func (e GetCartType) IsValid() bool {
	switch e {
	case GetCartTypeCartID, GetCartTypeUserID:
		return true
	}
	return false
}

func (e GetCartType) String() string {
	return string(e)
}

func (e *GetCartType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GetCartType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GetCartType", str)
	}
	return nil
}

func (e GetCartType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
