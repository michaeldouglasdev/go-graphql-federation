package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"go-graphql-apollo-federation/carts/graph/model"
	"go-graphql-apollo-federation/carts/internal/db"

	"github.com/google/uuid"
)

// Add is the resolver for the add field.
func (r *cartsMutationsResolver) Add(ctx context.Context, obj *model.CartsMutations, data model.CartsAddInput) (model.CartsAddResponse, error) {
	id := uuid.NewString()

	cartItemID, err := r.CartDB.GetCartItemByItemID(ctx, db.GetCartItemByItemIDParams{
		CartID: obj.ID,
		ItemID: data.Item.ID,
	})

	// Dont have the product on cart
	if err != nil {
		err = r.CartDB.AddCartItem(ctx, db.AddCartItemParams{
			ID:     id,
			Qty:    int16(data.Item.Qty),
			ItemID: data.Item.ID,
			CartID: obj.ID,
		})
		if err != nil {
			return &model.Error{
				Message: "An error occurrend while adding a item",
			}, nil
		}
	} else {
		err = r.CartDB.UpdateCartItem(ctx, db.UpdateCartItemParams{
			Qty:    int16(data.Item.Qty),
			CartID: obj.ID,
			ItemID: data.Item.ID,
			ID:     cartItemID,
		})

		if err != nil {
			return &model.Error{
				Message: "An error occurrend while updating a item",
			}, nil
		}
	}

	items, err := r.CartDB.GetCartItems(ctx, obj.ID)
	if err != nil {
		return model.Error{
			Message: "An error occurred while getting the cart",
		}, nil
	}

	var itemsModel []*model.CartItem

	for _, item := range items {
		itemsModel = append(itemsModel, &model.CartItem{
			ID:  &item.ID,
			Qty: int(item.Qty),
			Item: &model.Item{
				ID: item.ItemID,
			},
		})
	}

	println("itemsmodel", len(itemsModel))
	println("idd", id)
	return &model.Cart{
		ID:    items[0].CartID,
		Items: itemsModel,
		TotalPrice: &model.CartTotalPrice{
			Value: 0,
		},
	}, nil
}

// Update is the resolver for the update field.
func (r *cartsMutationsResolver) Update(ctx context.Context, obj *model.CartsMutations, data model.CartsUpdateInput) (model.CartsUpdateResponse, error) {
	cartItemId, err := r.CartDB.GetCartItemByItemID(ctx, db.GetCartItemByItemIDParams{
		CartID: obj.ID,
		ItemID: data.Item.ID,
	})

	if err != nil {
		return &model.Error{
			Message: "An error occured while updating the item",
		}, nil
	}

	err = r.CartDB.UpdateCartItem(ctx, db.UpdateCartItemParams{
		Qty:    int16(data.Item.Qty),
		CartID: obj.ID,
		ItemID: data.Item.ID,
		ID:     cartItemId,
	})

	if err != nil {
		return &model.Error{
			Message: "An error occured while updating the item",
		}, nil
	}
	// TODO
	return nil, nil
}

// Get is the resolver for the get field.
func (r *cartsQueriesResolver) Get(ctx context.Context, obj *model.CartsQueries, data *model.GetCartInput) (model.CartResponse, error) {
	if data == nil {
		println("get 1")
		id := uuid.NewString()

		err := r.CartDB.CreateCart(ctx, id)
		if err != nil {
			return model.Error{
				Message: "An error occurred while creating a cart",
			}, nil
		}

		println("get 2")
		//cart, err := r.CartDB.GetCart(ctx, id)
		return &model.Cart{
			ID:    id,
			Items: []*model.CartItem{},
			TotalPrice: &model.CartTotalPrice{
				Value: 0,
			},
		}, nil
	}

	println("get 3")
	items, err := r.CartDB.GetCartItems(ctx, data.Value)
	if err != nil {
		return model.Error{
			Message: "An error occurred while creating a cart",
		}, nil
	}

	var itemsModel []*model.CartItem

	for _, item := range items {
		println("item", item.ItemID)
		itemsModel = append(itemsModel, &model.CartItem{
			ID:  &item.ID,
			Qty: int(item.Qty),
			Item: &model.Item{
				ID: item.ItemID,
			},
		})
	}

	println("get 4", len(items))
	return &model.Cart{
		ID:    data.Value,
		Items: itemsModel,
		TotalPrice: &model.CartTotalPrice{
			Value: 0,
		},
	}, nil
}

// Carts is the resolver for the carts field.
func (r *mutationResolver) Carts(ctx context.Context, id string) (*model.CartsMutations, error) {
	return &model.CartsMutations{
		ID: id,
	}, nil
}

// Carts is the resolver for the carts field.
func (r *queryResolver) Carts(ctx context.Context) (*model.CartsQueries, error) {
	return &model.CartsQueries{}, nil
}

// CartsMutations returns CartsMutationsResolver implementation.
func (r *Resolver) CartsMutations() CartsMutationsResolver { return &cartsMutationsResolver{r} }

// CartsQueries returns CartsQueriesResolver implementation.
func (r *Resolver) CartsQueries() CartsQueriesResolver { return &cartsQueriesResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type cartsMutationsResolver struct{ *Resolver }
type cartsQueriesResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
