// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart_items(id, item_id, qty, cart_id)
VALUES (?, ?, ?, ?)
`

type AddCartItemParams struct {
	ID     string
	ItemID string
	Qty    int16
	CartID string
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.ExecContext(ctx, addCartItem,
		arg.ID,
		arg.ItemID,
		arg.Qty,
		arg.CartID,
	)
	return err
}

const createCart = `-- name: CreateCart :exec
INSERT INTO carts(id)
VALUES (?)
`

func (q *Queries) CreateCart(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, createCart, id)
	return err
}

const getCart = `-- name: GetCart :one
SELECT id FROM carts WHERE id = ?
`

func (q *Queries) GetCart(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCart, id)
	err := row.Scan(&id)
	return id, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, item_id, qty, cart_id FROM cart_items
WHERE id = ?
`

func (q *Queries) GetCartItem(ctx context.Context, id string) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Qty,
		&i.CartID,
	)
	return i, err
}

const getCartItemByItemID = `-- name: GetCartItemByItemID :one
SELECT id
FROM cart_items
WHERE cart_id = ? AND item_id = ?
`

type GetCartItemByItemIDParams struct {
	CartID string
	ItemID string
}

func (q *Queries) GetCartItemByItemID(ctx context.Context, arg GetCartItemByItemIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getCartItemByItemID, arg.CartID, arg.ItemID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT id, item_id, qty, cart_id FROM cart_items
WHERE cart_id = ?
`

func (q *Queries) GetCartItems(ctx context.Context, cartID string) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.Qty,
			&i.CartID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart_items
SET qty = qty + ?
WHERE cart_id = ? AND item_id = ? AND id = ?
`

type UpdateCartItemParams struct {
	Qty    int16
	CartID string
	ItemID string
	ID     string
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.ExecContext(ctx, updateCartItem,
		arg.Qty,
		arg.CartID,
		arg.ItemID,
		arg.ID,
	)
	return err
}
